# Generated by Django 3.0.8 on 2020-12-15 03:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('last_action_datetime', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='AssetCapacity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=32)),
                ('project_id', models.CharField(max_length=32)),
                ('work_order_name', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'ordering': ('serial_number',),
            },
        ),
        migrations.CreateModel(
            name='AssetType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32, unique=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='AvailableDefect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=32)),
                ('short_name', models.CharField(max_length=64)),
                ('description', models.TextField()),
            ],
            options={
                'ordering': ('category',),
            },
        ),
        migrations.CreateModel(
            name='AzureFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='')),
                ('name', models.CharField(blank=True, max_length=512, null=True)),
                ('uploaded_datetime', models.DateTimeField(auto_now_add=True)),
                ('hash_algorithm', models.CharField(choices=[['md5', 'md5'], ['sha1', 'sha1'], ['sha3_512', 'sha3_512'], ['sha512', 'sha512']], default='sha3_512', max_length=32)),
                ('hash', models.CharField(max_length=256)),
                ('length', models.BigIntegerField()),
                ('blob_container', models.CharField(blank=True, default=None, max_length=32, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ConditionDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Crate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=128, unique=True)),
                ('short_name', models.CharField(blank=True, max_length=32, null=True)),
                ('contact_name', models.CharField(blank=True, max_length=32, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('accounting_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('po_required', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Disposition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32, unique=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('complete', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='DispositionCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ExpectedUnitType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expected_count', models.IntegerField()),
                ('received_count', models.IntegerField()),
            ],
            options={
                'ordering': ('project',),
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('notes', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GroupType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Limit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_boolean', models.BooleanField()),
                ('value_string', models.CharField(blank=True, max_length=32, null=True)),
                ('limit_one', models.FloatField()),
                ('limit_two', models.FloatField()),
                ('precision', models.IntegerField()),
                ('units', models.CharField(max_length=32)),
                ('scientific_format', models.BooleanField()),
                ('choice_of_list', models.CharField(blank=True, max_length=32, null=True)),
                ('case_sensitive_compare_string', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='LimitComparison',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('description', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='LimitComparisonMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('description', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MeasurementDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('record_only', models.BooleanField(blank=True, null=True)),
                ('allow_skip', models.BooleanField(blank=True, null=True)),
                ('requires_review', models.BooleanField(blank=True, null=True)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('report_order', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MeasurementResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(blank=True, null=True)),
                ('software_revision', models.CharField(max_length=32)),
                ('result_double', models.FloatField(blank=True, null=True)),
                ('result_datetime', models.DateTimeField(blank=True, null=True)),
                ('result_string', models.CharField(blank=True, max_length=32, null=True)),
                ('result_boolean', models.BooleanField(blank=True, null=True)),
                ('review_datetime', models.DateTimeField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=128, null=True)),
                ('tag', models.CharField(blank=True, max_length=32, null=True)),
                ('station', models.IntegerField()),
                ('start_datetime', models.DateTimeField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('do_not_include', models.BooleanField(default=False)),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('record_only', models.BooleanField(default=False)),
                ('allow_skip', models.BooleanField(default=False)),
                ('requires_review', models.BooleanField(default=False)),
                ('order', models.IntegerField()),
                ('report_order', models.IntegerField()),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MeasurementResultType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32, unique=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MeasurementType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32, unique=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('order_by', models.IntegerField()),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ModuleProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_cells', models.IntegerField()),
                ('nameplate_pmax', models.FloatField()),
                ('module_width', models.FloatField()),
                ('module_height', models.FloatField()),
                ('system_voltage', models.FloatField()),
                ('auditor', models.CharField(blank=True, max_length=32, null=True)),
                ('audit_date', models.DateField(blank=True, null=True)),
                ('audit_report_id', models.CharField(blank=True, max_length=32, null=True)),
                ('isc', models.FloatField()),
                ('voc', models.FloatField()),
                ('imp', models.FloatField()),
                ('vmp', models.FloatField()),
                ('alpha_isc', models.FloatField(blank=True, null=True)),
                ('beta_voc', models.FloatField(blank=True, null=True)),
                ('gamma_pmp', models.FloatField(blank=True, null=True)),
                ('cells_in_series', models.IntegerField(blank=True, null=True)),
                ('cells_in_parallel', models.IntegerField(blank=True, null=True)),
                ('cell_area', models.FloatField(blank=True, null=True)),
            ],
            options={
                'ordering': ('nameplate_pmax',),
            },
        ),
        migrations.CreateModel(
            name='ModuleTechnology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=256)),
                ('text', models.TextField(blank=True, null=True)),
                ('datetime', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('user', 'subject'),
            },
        ),
        migrations.CreateModel(
            name='NotificationQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transport', models.CharField(choices=[['EMAIL', 'EMAIL']], default='EMAIL', max_length=8)),
                ('subject', models.CharField(blank=True, db_index=True, default='', max_length=255)),
                ('text_body', models.TextField(blank=True, default='')),
                ('html_body', models.TextField(blank=True, default='')),
                ('queued_date', models.DateTimeField(auto_now_add=True)),
                ('sent', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('queued_date',),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name', 'group'),
            },
        ),
        migrations.CreateModel(
            name='PermissionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='PermittedView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32, unique=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ProcedureDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('work_in_progress_must_comply', models.BooleanField(default=False)),
                ('supersede', models.BooleanField(blank=True, null=True)),
                ('version', models.CharField(max_length=32)),
                ('linear_execution_group', models.IntegerField()),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ProcedureExecutionOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execution_group_name', models.CharField(blank=True, max_length=128, null=True)),
                ('execution_group_number', models.IntegerField()),
                ('repetition_group_number', models.IntegerField(blank=True, null=True)),
                ('allow_skip', models.BooleanField()),
            ],
            options={
                'ordering': ('execution_group_number',),
            },
        ),
        migrations.CreateModel(
            name='ProcedureResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField(blank=True, null=True)),
                ('end_datetime', models.DateTimeField(blank=True, null=True)),
                ('linear_execution_group', models.BigIntegerField()),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('work_in_progress_must_comply', models.BooleanField(default=False)),
                ('supersede', models.BooleanField(blank=True, null=True)),
                ('version', models.CharField(max_length=32)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=32)),
                ('sfdc_number', models.CharField(blank=True, max_length=32, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('invoice_date', models.DateField(blank=True, null=True)),
                ('proposal_price', models.FloatField(blank=True, null=True)),
            ],
            options={
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('value', models.CharField(blank=True, max_length=32, null=True)),
                ('source', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('tag', models.CharField(blank=True, max_length=32, null=True)),
                ('controlled', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='SiPrefix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='StepDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('linear_execution_group', models.IntegerField()),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='StepExecutionOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execution_group_number', models.IntegerField()),
                ('allow_skip', models.BooleanField()),
            ],
            options={
                'ordering': ('execution_group_number',),
            },
        ),
        migrations.CreateModel(
            name='StepResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.CharField(blank=True, max_length=128, null=True)),
                ('execution_number', models.IntegerField()),
                ('start_datetime', models.DateTimeField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('step_number', models.CharField(blank=True, max_length=32, null=True)),
                ('linear_execution_group', models.FloatField()),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='StepType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TestSequenceDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('notes', models.CharField(blank=True, max_length=128, null=True)),
                ('version', models.CharField(max_length=32)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TestSequenceExecutionData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('units_required', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=128)),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('notes', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('serial_number',),
            },
        ),
        migrations.CreateModel(
            name='UnitType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=128)),
                ('bom', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('notes', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('model',),
            },
        ),
        migrations.CreateModel(
            name='UnitTypeFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32, unique=True)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='UnitTypePropertyDataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='UnitTypePropertyResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_double', models.FloatField(blank=True, null=True)),
                ('value_datetime', models.DateTimeField(auto_now_add=True)),
                ('value_string', models.CharField(blank=True, max_length=32, null=True)),
                ('value_boolean', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UnitTypePropertyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('value', models.CharField(blank=True, max_length=32, null=True)),
                ('source', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('tag', models.CharField(blank=True, max_length=32, null=True)),
                ('controlled', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, max_length=500, null=True)),
                ('registration_comment', models.CharField(blank=True, max_length=128, null=True)),
                ('administration_comment', models.CharField(blank=True, max_length=128, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('box_user', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'ordering': ('user',),
            },
        ),
        migrations.CreateModel(
            name='UserRegistrationStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('status',),
            },
        ),
        migrations.CreateModel(
            name='WorkOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('start_datetime', models.DateTimeField(blank=True, null=True)),
                ('tib', models.BooleanField(blank=True, null=True)),
                ('disposition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Disposition')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Project')),
                ('test_sequence_definitions', models.ManyToManyField(blank=True, through='lsdb.TestSequenceExecutionData', to='lsdb.TestSequenceDefinition')),
                ('units', models.ManyToManyField(blank=True, to='lsdb.Unit')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.AddIndex(
            model_name='userregistrationstatus',
            index=models.Index(fields=['status'], name='lsdb_userre_status_1a7f1e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userregistrationstatus',
            unique_together={('status',)},
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_registration_status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.UserRegistrationStatus'),
        ),
        migrations.AddField(
            model_name='unittypepropertytype',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Group'),
        ),
        migrations.AddField(
            model_name='unittypepropertyresult',
            name='unit_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.UnitType'),
        ),
        migrations.AddField(
            model_name='unittypepropertyresult',
            name='unit_type_property_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.UnitTypePropertyType'),
        ),
        migrations.AddIndex(
            model_name='unittypepropertydatatype',
            index=models.Index(fields=['name'], name='lsdb_unitty_name_978d2f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='unittypepropertydatatype',
            unique_together={('name',)},
        ),
        migrations.AddField(
            model_name='unittypefamily',
            name='measurement_types',
            field=models.ManyToManyField(to='lsdb.MeasurementType'),
        ),
        migrations.AddField(
            model_name='unittype',
            name='datasheets',
            field=models.ManyToManyField(blank=True, to='lsdb.AzureFile'),
        ),
        migrations.AddField(
            model_name='unittype',
            name='manufacturer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Customer'),
        ),
        migrations.AddField(
            model_name='unittype',
            name='module_property',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.ModuleProperty'),
        ),
        migrations.AddField(
            model_name='unittype',
            name='unit_type_family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.UnitTypeFamily'),
        ),
        migrations.AddField(
            model_name='unit',
            name='crate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Crate'),
        ),
        migrations.AddField(
            model_name='unit',
            name='fixture_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.Asset'),
        ),
        migrations.AddField(
            model_name='unit',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Location'),
        ),
        migrations.AddField(
            model_name='unit',
            name='unit_images',
            field=models.ManyToManyField(blank=True, to='lsdb.AzureFile'),
        ),
        migrations.AddField(
            model_name='unit',
            name='unit_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.UnitType'),
        ),
        migrations.AddField(
            model_name='testsequenceexecutiondata',
            name='test_sequence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.TestSequenceDefinition'),
        ),
        migrations.AddField(
            model_name='testsequenceexecutiondata',
            name='work_order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.WorkOrder'),
        ),
        migrations.AddField(
            model_name='testsequencedefinition',
            name='disposition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Disposition'),
        ),
        migrations.AddField(
            model_name='testsequencedefinition',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Group'),
        ),
        migrations.AddField(
            model_name='testsequencedefinition',
            name='procedure_definitions',
            field=models.ManyToManyField(through='lsdb.ProcedureExecutionOrder', to='lsdb.ProcedureDefinition'),
        ),
        migrations.AddField(
            model_name='testsequencedefinition',
            name='unit_type_family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.UnitTypeFamily'),
        ),
        migrations.AddField(
            model_name='stepresult',
            name='disposition',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.Disposition'),
        ),
        migrations.AddField(
            model_name='stepresult',
            name='procedure_result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.ProcedureResult'),
        ),
        migrations.AddField(
            model_name='stepresult',
            name='step_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.StepDefinition'),
        ),
        migrations.AddField(
            model_name='stepresult',
            name='step_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.StepType'),
        ),
        migrations.AddField(
            model_name='stepresult',
            name='test_step_result',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.StepResult'),
        ),
        migrations.AddField(
            model_name='stepexecutionorder',
            name='procedure_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.ProcedureDefinition'),
        ),
        migrations.AddField(
            model_name='stepexecutionorder',
            name='step_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.StepDefinition'),
        ),
        migrations.AddField(
            model_name='stepdefinition',
            name='step_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.StepType'),
        ),
        migrations.AddField(
            model_name='property',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Group'),
        ),
        migrations.AddField(
            model_name='project',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Customer'),
        ),
        migrations.AddField(
            model_name='project',
            name='disposition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Disposition'),
        ),
        migrations.AddField(
            model_name='project',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Group'),
        ),
        migrations.AddField(
            model_name='project',
            name='notes',
            field=models.ManyToManyField(blank=True, to='lsdb.Note'),
        ),
        migrations.AddField(
            model_name='project',
            name='project_manager',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='sri_notes',
            field=models.ManyToManyField(blank=True, related_name='sri_notes', to='lsdb.Note'),
        ),
        migrations.AddField(
            model_name='project',
            name='units',
            field=models.ManyToManyField(blank=True, to='lsdb.Unit'),
        ),
        migrations.AddField(
            model_name='procedureresult',
            name='disposition',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.Disposition'),
        ),
        migrations.AddField(
            model_name='procedureresult',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Group'),
        ),
        migrations.AddField(
            model_name='procedureresult',
            name='procedure_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.ProcedureDefinition'),
        ),
        migrations.AddField(
            model_name='procedureresult',
            name='test_sequence_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.TestSequenceDefinition'),
        ),
        migrations.AddField(
            model_name='procedureresult',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.Unit'),
        ),
        migrations.AddField(
            model_name='procedureresult',
            name='work_order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.WorkOrder'),
        ),
        migrations.AddField(
            model_name='procedureexecutionorder',
            name='procedure_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.ProcedureDefinition'),
        ),
        migrations.AddField(
            model_name='procedureexecutionorder',
            name='test_sequence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.TestSequenceDefinition'),
        ),
        migrations.AddField(
            model_name='proceduredefinition',
            name='asset_types',
            field=models.ManyToManyField(to='lsdb.AssetType'),
        ),
        migrations.AddField(
            model_name='proceduredefinition',
            name='disposition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Disposition'),
        ),
        migrations.AddField(
            model_name='proceduredefinition',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Group'),
        ),
        migrations.AddField(
            model_name='proceduredefinition',
            name='step_definitions',
            field=models.ManyToManyField(through='lsdb.StepExecutionOrder', to='lsdb.StepDefinition'),
        ),
        migrations.AddField(
            model_name='proceduredefinition',
            name='unit_type_family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.UnitTypeFamily'),
        ),
        migrations.AddIndex(
            model_name='permissiontype',
            index=models.Index(fields=['name'], name='lsdb_permis_name_03e0a3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='permissiontype',
            unique_together={('name',)},
        ),
        migrations.AddField(
            model_name='permission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Group'),
        ),
        migrations.AddField(
            model_name='permission',
            name='permission_types',
            field=models.ManyToManyField(blank=True, to='lsdb.PermissionType'),
        ),
        migrations.AddField(
            model_name='permission',
            name='permitted_views',
            field=models.ManyToManyField(blank=True, to='lsdb.PermittedView'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['name'], name='lsdb_organi_name_89f38e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='organization',
            unique_together={('name',)},
        ),
        migrations.AddField(
            model_name='notificationqueue',
            name='recipient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='note',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='moduleproperty',
            name='module_technology',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.ModuleTechnology'),
        ),
        migrations.AddField(
            model_name='measurementtype',
            name='limit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Limit'),
        ),
        migrations.AddField(
            model_name='measurementtype',
            name='measurement_result_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.MeasurementResultType'),
        ),
        migrations.AddField(
            model_name='measurementtype',
            name='parent_measurement_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.MeasurementType'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='asset',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.Asset'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='disposition',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.Disposition'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='limit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Limit'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.Location'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='measurement_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.MeasurementDefinition'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='measurement_result_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.MeasurementResultType'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='measurement_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.MeasurementType'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='result_defect',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.AvailableDefect'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='result_files',
            field=models.ManyToManyField(blank=True, to='lsdb.AzureFile'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='reviewed_by_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviewed_by_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='step_result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.StepResult'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='measurementdefinition',
            name='condition_definition',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lsdb.ConditionDefinition'),
        ),
        migrations.AddField(
            model_name='measurementdefinition',
            name='limit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Limit'),
        ),
        migrations.AddField(
            model_name='measurementdefinition',
            name='measurement_result_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.MeasurementResultType'),
        ),
        migrations.AddField(
            model_name='measurementdefinition',
            name='measurement_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.MeasurementType'),
        ),
        migrations.AddField(
            model_name='measurementdefinition',
            name='step_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.StepDefinition'),
        ),
        migrations.AddField(
            model_name='location',
            name='parent_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_locations', to='lsdb.Location'),
        ),
        migrations.AddField(
            model_name='limit',
            name='limit_comparison_mode',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.LimitComparisonMode'),
        ),
        migrations.AddField(
            model_name='limit',
            name='limit_comparison_one',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='limitcomparisonone', to='lsdb.LimitComparison'),
        ),
        migrations.AddField(
            model_name='limit',
            name='limit_comparison_two',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='limitcomparisontwo', to='lsdb.LimitComparison'),
        ),
        migrations.AddField(
            model_name='limit',
            name='si_prefix',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.SiPrefix'),
        ),
        migrations.AddIndex(
            model_name='grouptype',
            index=models.Index(fields=['name'], name='lsdb_groupt_name_52ce63_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='grouptype',
            unique_together={('name',)},
        ),
        migrations.AddField(
            model_name='group',
            name='group_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.GroupType'),
        ),
        migrations.AddField(
            model_name='group',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Organization'),
        ),
        migrations.AddField(
            model_name='group',
            name='unit_type',
            field=models.ManyToManyField(blank=True, to='lsdb.UnitType'),
        ),
        migrations.AddField(
            model_name='group',
            name='users',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='expectedunittype',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Project'),
        ),
        migrations.AddField(
            model_name='expectedunittype',
            name='unit_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.UnitType'),
        ),
        migrations.AddField(
            model_name='dispositioncode',
            name='dispositions',
            field=models.ManyToManyField(blank=True, to='lsdb.Disposition'),
        ),
        migrations.AddField(
            model_name='customer',
            name='notes',
            field=models.ManyToManyField(blank=True, to='lsdb.Note'),
        ),
        migrations.AddField(
            model_name='crate',
            name='crate_images',
            field=models.ManyToManyField(blank=True, to='lsdb.AzureFile'),
        ),
        migrations.AddField(
            model_name='crate',
            name='disposition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Disposition'),
        ),
        migrations.AddField(
            model_name='crate',
            name='observations',
            field=models.ManyToManyField(blank=True, to='lsdb.Note'),
        ),
        migrations.AddField(
            model_name='crate',
            name='shipped_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Customer'),
        ),
        migrations.AddField(
            model_name='conditiondefinition',
            name='step_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.StepDefinition'),
        ),
        migrations.AddIndex(
            model_name='azurefile',
            index=models.Index(fields=['name', 'hash', 'blob_container'], name='lsdb_azuref_name_ec4d18_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='azurefile',
            unique_together={('name', 'hash', 'blob_container')},
        ),
        migrations.AddIndex(
            model_name='availabledefect',
            index=models.Index(fields=['category', 'short_name'], name='lsdb_availa_categor_3fb825_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='availabledefect',
            unique_together={('category', 'short_name')},
        ),
        migrations.AddField(
            model_name='assetcapacity',
            name='asset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Asset'),
        ),
        migrations.AddField(
            model_name='asset',
            name='asset_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.AssetType'),
        ),
        migrations.AddField(
            model_name='asset',
            name='disposition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Disposition'),
        ),
        migrations.AddField(
            model_name='asset',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsdb.Location'),
        ),
        migrations.AddIndex(
            model_name='workorder',
            index=models.Index(fields=['name', 'project'], name='lsdb_workor_name_14522d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workorder',
            unique_together={('name', 'project')},
        ),
        migrations.AddIndex(
            model_name='unittypepropertytype',
            index=models.Index(fields=['name', 'tag'], name='lsdb_unitty_name_8c1082_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='unittypepropertytype',
            unique_together={('name', 'tag')},
        ),
        migrations.AddIndex(
            model_name='unittypepropertyresult',
            index=models.Index(fields=['unit_type', 'unit_type_property_type'], name='lsdb_unitty_unit_ty_a67932_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='unittypepropertyresult',
            unique_together={('unit_type', 'unit_type_property_type')},
        ),
        migrations.AddIndex(
            model_name='unittype',
            index=models.Index(fields=['manufacturer', 'model', 'bom'], name='lsdb_unitty_manufac_415a1e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='unittype',
            unique_together={('manufacturer', 'model', 'bom')},
        ),
        migrations.AddIndex(
            model_name='unit',
            index=models.Index(fields=['serial_number', 'unit_type'], name='lsdb_unit_serial__112b4b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='unit',
            unique_together={('serial_number', 'unit_type')},
        ),
        migrations.AddIndex(
            model_name='testsequenceexecutiondata',
            index=models.Index(fields=['work_order', 'test_sequence'], name='lsdb_testse_work_or_99b9a6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testsequenceexecutiondata',
            unique_together={('work_order', 'test_sequence')},
        ),
        migrations.AddIndex(
            model_name='testsequencedefinition',
            index=models.Index(fields=['name', 'group', 'version', 'unit_type_family'], name='lsdb_testse_name_45682a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testsequencedefinition',
            unique_together={('name', 'group', 'version', 'unit_type_family')},
        ),
        migrations.AddIndex(
            model_name='stepresult',
            index=models.Index(fields=['procedure_result', 'execution_number', 'step_definition', 'test_step_result'], name='lsdb_stepre_procedu_055d6a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='stepresult',
            unique_together={('procedure_result', 'execution_number', 'step_definition', 'test_step_result')},
        ),
        migrations.AddIndex(
            model_name='stepexecutionorder',
            index=models.Index(fields=['execution_group_number', 'procedure_definition', 'step_definition'], name='lsdb_stepex_executi_55f376_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='stepexecutionorder',
            unique_together={('execution_group_number', 'procedure_definition', 'step_definition')},
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['name', 'group', 'source'], name='lsdb_proper_name_c5e541_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='property',
            unique_together={('name', 'group', 'source')},
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['number', 'group'], name='lsdb_projec_number_11e14e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('number', 'group')},
        ),
        migrations.AddIndex(
            model_name='procedureresult',
            index=models.Index(fields=['unit', 'procedure_definition', 'work_order', 'linear_execution_group', 'start_datetime'], name='lsdb_proced_unit_id_922b1d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='procedureresult',
            unique_together={('unit', 'procedure_definition', 'work_order', 'linear_execution_group', 'start_datetime')},
        ),
        migrations.AddIndex(
            model_name='procedureexecutionorder',
            index=models.Index(fields=['execution_group_number', 'procedure_definition', 'test_sequence'], name='lsdb_proced_executi_bb4e62_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='procedureexecutionorder',
            unique_together={('execution_group_number', 'procedure_definition', 'test_sequence')},
        ),
        migrations.AddIndex(
            model_name='proceduredefinition',
            index=models.Index(fields=['name', 'group', 'version', 'unit_type_family'], name='lsdb_proced_name_7426a2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='proceduredefinition',
            unique_together={('name', 'group', 'version', 'unit_type_family')},
        ),
        migrations.AddIndex(
            model_name='permission',
            index=models.Index(fields=['name', 'group'], name='lsdb_permis_name_feda75_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='permission',
            unique_together={('name', 'group')},
        ),
        migrations.AddIndex(
            model_name='measurementresult',
            index=models.Index(fields=['step_result', 'measurement_definition', 'date_time'], name='lsdb_measur_step_re_b674c3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='measurementresult',
            unique_together={('step_result', 'measurement_definition', 'date_time')},
        ),
        migrations.AddIndex(
            model_name='measurementdefinition',
            index=models.Index(fields=['name', 'step_definition'], name='lsdb_measur_name_5fc7bb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='measurementdefinition',
            unique_together={('name', 'step_definition')},
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['name', 'parent_location'], name='lsdb_locati_name_a1338a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together={('name', 'parent_location')},
        ),
        migrations.AddIndex(
            model_name='limit',
            index=models.Index(fields=['value_boolean', 'value_string', 'limit_one', 'limit_two', 'limit_comparison_one', 'limit_comparison_two', 'limit_comparison_mode', 'precision', 'units', 'scientific_format', 'si_prefix', 'choice_of_list', 'case_sensitive_compare_string'], name='lsdb_limit_value_b_d0f5be_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='limit',
            unique_together={('value_boolean', 'value_string', 'limit_one', 'limit_two', 'limit_comparison_one', 'limit_comparison_two', 'limit_comparison_mode', 'precision', 'units', 'scientific_format', 'si_prefix', 'choice_of_list', 'case_sensitive_compare_string')},
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['name', 'organization', 'group_type'], name='lsdb_group_name_976e47_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together={('name', 'organization', 'group_type')},
        ),
        migrations.AddIndex(
            model_name='expectedunittype',
            index=models.Index(fields=['project', 'unit_type'], name='lsdb_expect_project_8af7ec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='expectedunittype',
            unique_together={('project', 'unit_type')},
        ),
        migrations.AddIndex(
            model_name='crate',
            index=models.Index(fields=['name', 'shipped_by'], name='lsdb_crate_name_90261f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='crate',
            unique_together={('name', 'shipped_by')},
        ),
        migrations.AddIndex(
            model_name='conditiondefinition',
            index=models.Index(fields=['name', 'step_definition'], name='lsdb_condit_name_cd410d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='conditiondefinition',
            unique_together={('name', 'step_definition')},
        ),
        migrations.AddIndex(
            model_name='assetcapacity',
            index=models.Index(fields=['serial_number', 'project_id', 'asset'], name='lsdb_assetc_serial__b13e36_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assetcapacity',
            unique_together={('serial_number', 'project_id', 'asset')},
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['asset_type', 'name', 'location'], name='lsdb_asset_asset_t_220646_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='asset',
            unique_together={('asset_type', 'name', 'location')},
        ),
    ]
